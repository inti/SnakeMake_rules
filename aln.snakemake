import pandas as pd
import os
from os.path import isfile, islink

REF="/home/ipedroso/DATA/ref_genomes/B_terrestris/Bombus_terrestris.Bter_1.0.dna.toplevel.fa"
GTF="/home/ipedroso/DATA/ref_genomes/B_terrestris/Bombus_terrestris.Bter_1.0.39.gtf"
#SAMPLES = pd.read_csv("SRR_Acc_list.txt", names=['acc'], squeeze=True).values


include: "ase.snakemake"

#ruleorder: gsnap_map_pe > gsnap_map_se
#ruleorder: salmon_quant_pe > salmon_quant_se
#ruleorder: freebayes_call_parallel > merge_chr_vcf > freebayes_call_chrom 

localrules: all, vcf_index#, split_sample_bed, split_bed

def get_chroms():
    chroms = pd.read_table("/home/ipedroso/DATA/ref_genomes/B_terrestris/Bombus_terrestris.Bter_1.0.dna.toplevel.fa.fai",names=["CHROM","var1","var2","var3","var4"]).loc[:,"CHROM"].tolist()
    return chroms

def get_sample_ids():
    files = os.listdir("fastq/")
    _ids = pd.unique([ f.replace(".fastq.gz","").replace("_1","").replace("_2","") for f in files])
    return _ids

SAMPLES = get_sample_ids()
N_CALL_REGIONS_IDX=range(1,25)
CHROMS=get_chroms()

rule all: #bai=expand("aln/{sample}.bam.bai", sample=get_se_files()), bai_pe=expand("aln/{pe_sample}.bam.bai", sample=get_pe_files()),\
    input: bai = expand("aln/{sample}.bam.bai", sample=SAMPLES),\
	vcf=expand("vcf/freebayes.joint.snps{types}vcf.gz", types=[".",".rbp.",".rbp.imputed."]),\
	#rnaseq_quant = "rnaseq_quant/salmon_gene_counts_lengthScaledTPM.txt",\
        phaser_ase = expand("phaser/{sample}/{sample}.phaser_ase.{feat_type}.txt", feat_type=["transcript","gene"], sample=SAMPLES)

rule beagle_phasing:
    input: "vcf/freebayes.joint.snps.rbp.vcf.gz"
    output: "vcf/freebayes.joint.snps.rbp.imputed.vcf.gz"
    params: prefix="vcf/freebayes.joint.snps.rbp.imputed"
    shell: "java -jar ~/app/beagle.r1399.jar gtgl={input} out={params.prefix} usephase=true"

rule read_backed_phasing:
    input: joint_vcf = "vcf/freebayes.joint.snps.vcf.gz", bams = expand("aln/{sample}.bam", sample=SAMPLES)
    output: "vcf/freebayes.joint.snps.rbp.vcf.gz"
    params: log= "vcf/freebayes.joint.snps.rbp.log"
    shell: "~/anaconda2/envs/whatshap/bin/whatshap phase --max-coverage 20 -o >( sed \"s/\.:\.:\.:\.:\.:\.:\.:\./.\/.:.:.:.:.:.:.:./g\" /dev/stdin | bgzip -c /dev/stdin > {output}) {input.joint_vcf} {input.bams} &>{params.log}"

rule freebayes_call_region:
    input: ref=REF, bams = expand("aln/{sample}.bam", sample=SAMPLES), region = "aln/covered_regions_{region_subset}", bais = expand("aln/{sample}.bam.bai", sample=SAMPLES), known_vars = "vcf/call/freebayes.call.region_{region_subset}.vcf.gz", known_vars_tbi = "vcf/call/freebayes.call.region_{region_subset}.vcf.gz.tbi"
    output: temp("vcf/joint/freebayes.joint.region_{region_subset}.vcf.gz")
    threads: 14
    resources: io_score = 10
    priority: 100
    shell: "freebayes-parallel <(sed \"s/	/:/\" {input.region} |  sed \"s/	/\-/\" ) {threads} -@ {input.known_vars} --only-use-input-alleles -f {input.ref} {input.bams} --min-alternate-count 1 --min-alternate-fraction 0.01 --min-coverage 5 -0 | vt sort -m full /dev/stdin | vt uniq /dev/stdin | vt normalize -r {input.ref} /dev/stdin | bgzip -c /dev/stdin | bcftools filter --SnpGap 10 -i \"QUAL>30\" -O z -o {output} "

rule merge_region_vcf:
    input: vcf = dynamic("vcf/joint/freebayes.joint.region_{region_subset}.vcf.gz"), vcf_idx = dynamic("vcf/joint/freebayes.joint.region_{region_subset}.vcf.gz.tbi")
    output: raw = "vcf/freebayes.joint.vcf.gz", snps = "vcf/freebayes.joint.snps.vcf.gz"
    shell: """mkdir -p {output.raw}.TMPDIR && rm -f {output.raw}.TMPDIR/*
              vt cat {input.vcf} | bcftools sort -T {output.raw}.TMPDIR  -m 4G -o {output.raw} -O z /dev/stdin 
	      bcftools filter -i 'TYPE=\"snp\"' {output.raw} -O z -o {output.snps}""" 

rule merge_coverage:
    input: expand("aln/{sample}.bam.coverage.bed", sample=SAMPLES)
    output: bed_out = "aln/covered_regions.bed", chrom_ids = temp("aln/chrom_ids.txt")
    threads: 24
    shell: """cut -f 1 /home/ipedroso/DATA/ref_genomes/B_terrestris/Bombus_terrestris.Bter_1.0.dna.toplevel.fa.fai > {output.chrom_ids} 
	parallel -k -j {threads} -a aln/chrom_ids.txt \"grep -hw {{1}} {input} | sort -k1,1 -k2,2n | bedtools merge -d 1000\" 2>aln/covered_regions.log > {output.bed_out}"""

rule freebayes_call_region_per_sample:
    input: ref=REF, bams = "aln/{sample}.bam", region = "aln/{sample}.bam.coverage.bed_{sample_subset}", bais = "aln/{sample}.bam.bai"
    output: temp("vcf/call/{sample}.freebayes.call.region_{sample_subset}.vcf.gz")
    threads: 12
    resources: io_score = 10
    shell: "freebayes-parallel <(sed \"s/	/:/\" {input.region} |  sed \"s/	/\-/\" ) {threads} -f {input.ref} {input.bams} --min-alternate-count 1 --min-alternate-fraction 0.01 --min-coverage 5 -0 | vt sort -m full /dev/stdin | vt uniq /dev/stdin | vt normalize -r {input.ref} /dev/stdin | bgzip -c /dev/stdin | bcftools filter --SnpGap 10 -i \"QUAL>30\" -O z -o {output} "


rule merge_sample_region_vcf:
    input: vcf = expand("vcf/call/{sample}.freebayes.call.region_{sample_subset}.vcf.gz", sample_subset=N_CALL_REGIONS_IDX, sample="{sample}"), vcf_idx = expand("vcf/call/{sample}.freebayes.call.region_{sample_subset}.vcf.gz.tbi", sample_subset=N_CALL_REGIONS_IDX, sample="{sample}")
    output: raw = "vcf/call/{sample}.freebayes.call.vcf.gz", snps = "vcf/call/{sample}.freebayes.call.snps.vcf.gz"
#, tmp = temp("vcf/call/{sample}.freebayes.call.TMP.vcf.gz")
    priority: 1000
    shell: """mkdir -p {output.raw}.TMPDIR && rm -f {output.raw}.TMPDIR/*
              vt cat {input.vcf} |bcftools sort -m 4G -O z -T {output.raw}.TMPDIR -o {output.raw} /dev/stdin 
              bcftools filter -i 'TYPE=\"snp\"' {output.raw} -O z -o {output.snps}"""

rule merge_sample_vcf:
    input: vcf = expand("vcf/call/{sample}.freebayes.call.vcf.gz", sample=SAMPLES), vcf_idx = expand("vcf/call/{sample}.freebayes.call.vcf.gz.tbi", sample=SAMPLES)
    output: raw = "vcf/freebayes.call.vcf.gz", snps = "vcf/call/freebayes.call.snps.vcf.gz"
    shell: """bcftools merge {input.vcf} -O z -o {output.raw}
              bcftools filter -i 'TYPE=\"snp\"' {output.raw} -O z -o {output.snps}"""

rule covered_regions:
    input: "aln/{sample}.bam"
    output: "aln/{sample}.bam.coverage.bed"
    shell: "bedtools genomecov -ibam {input} -bg -split | bedtools merge -d 1000 > {output}"

rule split_sample_bed:
    input: "aln/{sample}.bam.coverage.bed"
    output: expand( temp("aln/{sample}.bam.coverage.bed_{sample_subset}"), sample_subset=N_CALL_REGIONS_IDX , sample="{sample}")
    shell: "NUMOFLINES=$(wc -l < \"{input}\") && N_4_SPLIT=$(($(( $NUMOFLINES / 25 )) + 1)) && cat {input} | parallel -j1 --pipe -N$N_4_SPLIT 'cat > aln/{wildcards.sample}.bam.coverage.bed_{{#}}' &> /dev/null"

rule split_bed:
    input: "aln/covered_regions.bed"
    output: dynamic("aln/covered_regions_{region_subset}")
    shell: "cat {input} | parallel -j1 --pipe -N1000 'cat > aln/covered_regions_{{#}}'"

rule split_call_vcf_covered_regions:
    input: vcf="vcf/freebayes.call.vcf.gz", tbi="vcf/freebayes.call.vcf.gz.tbi", region = "aln/covered_regions_{region_subset}"
    output: vcf="vcf/call/freebayes.call.region_{region_subset}.vcf.gz"
    shell: "mkdir {output}.TMPDIR && bcftools view -R {input.region} {input.vcf} | bcftools sort -m 4G -T {output}.TMPDIR -O z -o {output}"

rule vcf_index:
    input: "{file_name}.vcf.gz"
    output: "{file_name}.vcf.gz.tbi"
    shell: "tabix -f {input}"

rule samtools_index:
    input:
        "aln/{sample}.bam"
    output:
        "aln/{sample}.bam.bai"
    threads: 2
    shell:
        "samtools index -b -@ {threads} {input}"

def get_files_str(wildcards):
    samp = wildcards.sample
    return get_files_str_from_str(samp)

def get_files_str_from_str(samp):
    file_str_1 = ''.join(("fastq/",samp,"_1.fastq.gz"))
    file_str_2 = ''.join(("fastq/",samp,"_2.fastq.gz"))
    if (isfile(file_str_2) or islink(file_str_2)) and (isfile(file_str_2) or islink(file_str_2)):
        return [file_str_1 , file_str_2]
    elif isfile(file_str_1) or islink(file_str_1):
        return file_str_1

rule gsnap_map:
    input: fastq= get_files_str, ref = REF, gtf = GTF 
    output: bam =protected("aln/{sample}.bam") 
    threads: 10
    log: "aln/{sample}.log"
    shell:
        "gsnap -t {threads} --gunzip -N 0 -s ~/anaconda2/envs/ngs/share/b_terrestris/b_terrestris.maps/b_terrestris.splicesites.iit -D ~/anaconda2/envs/ngs/share/ -d b_terrestris --read-group-id={wildcards.sample} --read-group-name={wildcards.sample} --format=sam {input.fastq} 2> {log} | "
	"samtools view -@ {threads} -q 30 -S -O BAM /dev/stdin 2>> {log} |"
	"samtools sort -@ {threads} -O BAM -T aln/{wildcards.sample} /dev/stdin 2>> {log} | "
        "~/anaconda2/envs/ngs/bin/python ~/app/transIndel/transIndel_build_RNA.py -i /dev/stdin -r {input.ref} -g {input.gtf} -o aln/{wildcards.sample}.transIndel.bam 2>>{log} && "
	"cp -fv aln/{wildcards.sample}.transIndel.bam {output.bam} &>> {log}"

rule gsnap_remap:
    input: fastq= get_files_str, snp_iit = "gmap_db/b_terrestris/b_terrestris.maps/snp.iit"
    output: protected("aln_remap/{sample}.bam")
    threads: 10
    log: "aln_remap/{sample}.log"
    shell:
        "gsnap -t {threads} --gunzip -N 0 -s -v {input.snp_iit} -D gmap_db/ -d b_terrestris --read-group-id={wildcards.sample} --read-group-name={wildcards.sample} --format=sam {input.fastq} 2> {log} | "
        "samtools view -@ {threads} -q 30 -S -O BAM /dev/stdin 2> {log} |"
        "samtools sort -@ {threads} -O BAM -T aln/{wildcards.sample} /dev/stdin 2> {log} > {output}"

#rule gsnap_map_pe:
#    input: fq1 = "pe_fq/{sample}_1.fastq.gz", fq2 = "pe_fq/{sample}_2.fastq.gz"
#    output: protected("pe_bam/{sample}.bam")
#    params: sample="{sample}"
#    threads: 8
#    shell:
#        "gsnap -t {threads} --gunzip -N 0 -D ~/anaconda2/envs/ngs/share/ -d b_terrestris --read-group-id={params.sample} --read-group-name={params.sample} --format=sam {input} 2> aln/{params.sample}.log | "
#        "samtools view -@ {threads} -q 30 -S -O BAM /dev/stdin 2> aln/{params.sample}.log |"
#        "samtools sort -@ {threads} -O BAM -T aln/{params.sample} /dev/stdin 2> aln/{params.sample}.log > {output}"
#        #"sambamba view -F \"mapping_quality >= 50\" -  > {output}"

rule bcftools_call:
    input:
        fa=REF,
        bam=expand("aln/{sample}.bam", sample=SAMPLES),
        bai=expand("aln/{sample}.bam.bai", sample=SAMPLES)
    output:
        "calls/all.vcf"
    shell:
        "samtools mpileup -g -f {input.fa} {input.bam} | "
        "bcftools call -mv - > {output}"

rule gmap_db_snp_iit:
    input: "vcf/freebayes.joint.rbp.imputed.vcf.gz"
    output: snp_iit = "gmap_db/b_terrestris/b_terrestris.maps/snp.iit", temp_iit = temp("gmap_db/tmp_snp.iit")
    log: "gmap_db/snp.iit.log"
    shell: "ln -fs /home/ipedroso/anaconda2/envs/ngs/share/b_terrestris gmap_db && "
           "gunzip -c {input} | vcf_iit | iit_store -o {output.temp_iit} &> {log} && "
           "snpindex -D ./gmap_db -d b_terrestris -v snp {output.temp_iit} -V ./gmap_db/b_terrestris/b_terrestris.maps &> {log}"

# RNA seq abundance quantification

def get_salmon_reads_cmd(in_):
    back = "-r " + in_[0]
    if len(in_) == 2:
         back = "-1 " + in_[0] + " -2 " + in_[1]
    return back

rule salmon_quant:
    input: get_files_str
    output: "rnaseq_quant/salmon/{sample}/quant.sf","rnaseq_quant/salmon/{sample}/cmd_info.json", "rnaseq_quant/salmon/{sample}/lib_format_counts.json", "rnaseq_quant/salmon/{sample}/quant.sf.run_log"
    threads: 8
    log: "rnaseq_quant/salmon/{sample}/quant.sf.run_log"
    run:
        reads_cmd = get_salmon_reads_cmd(input)
        print(reads_cmd)
        shell("salmon quant -i ~/DATA/ref_genomes/B_terrestris/Bombus_terrestris.Bter_1.0.cdna.all.fa.salmon_index {reads_cmd} -o rnaseq_quant/salmon/{wildcards.sample} -l A -p {threads} --seqBias --posBias &> {log}")

rule tximport_summary:
    input: expand("rnaseq_quant/salmon/{sample}/quant.sf", sample=SAMPLES)
    output: gene_lengthScaledTPM = "rnaseq_quant/salmon_gene_counts_lengthScaledTPM.txt", gene_counts = "rnaseq_quant/salmon_gene_counts.txt", gene_length = "rnaseq_quant/salmon_gene_length.txt", tx_counts = "rnaseq_quant/salmon_tx_counts.txt", tx_length = "rnaseq_quant/salmon_tx_length.txt" 
    script: "scripts/tximpory_salmon_to_gene.R"



# Kinship matrix

rule seekin_hom_kinship:
    input: "vcf/freebayes.joint.rbp.imputed.vcf.gz"
    output: "test3.kin" #"kinship/freebayes.joint.rbp.imputed.kin" #expand("kinship/freebayes.joint.rbp.imputed.{ext}", ext=["inbreed","kin","matrix","matrixID"])
    threads: 8
    log: "kinship/freebayes.joint.rbp.imputed.seekin_hom.log"
    shell: "seekin kinship -i {input} -d DS -p hom -t {threads} -o test3" #kinship/freebayes.joint.rbp.imputed && ls -lh test3.*"

# phASER ASE

def bam_is_pe(wildcards):
    samp = wildcards.sample
    file_str_1 = ''.join(("fastq/",samp,"_1.fastq.gz"))
    file_str_2 = ''.join(("fastq/",samp,"_2.fastq.gz"))
    if (isfile(file_str_2) or islink(file_str_2)) and (isfile(file_str_2) or islink(file_str_2)):
        return 1
    elif isfile(file_str_1) or islink(file_str_1):
        return 0

rule phaser:
    input: vcf = "vcf/freebayes.joint.vcf.gz", bam = "aln/{sample}.bam", tbi = "vcf/freebayes.joint.vcf.gz.tbi", bai = "aln/{sample}.bam.bai"
    output: expand("phaser/{sample}/{sample}.{ext}", ext=["allele_config.txt","haplotypes.txt","variant_connections.txt","allelic_counts.txt","haplotypic_counts.txt","vcf.gz"], sample="{sample}")
    params: is_pe= bam_is_pe
    threads: 14
    log: "phaser/{sample}/{sample}.phaser.log"
    shell: """#mkdir -p phaser/{wildcards.sample}/byChrom #&& rm -f phaser/{wildcards.sample}/byChrom/* 
           #parallel -j {threads} -a aln/chrom_ids.txt ~/anaconda2/envs/ngs/bin/python ~/app/phaser/phaser/phaser.py --vcf {input.vcf} --bam {input.bam} --paired_end {params.is_pe} --mapq 30 --baseq 10 --sample {wildcards.sample} --o phaser/{wildcards.sample}/byChrom/{{1}} --chr {{1}} &> {log}
for ext in allele_config.txt allelic_counts.txt haplotypes.txt haplotypic_counts.txt variant_connections.txt;
           do
               ~/anaconda2/envs/ngs/bin/python -c 'import pandas as pd; import sys; frame = pd.concat([  pd.read_table(file_,index_col=None, header=0) for file_ in sys.argv[2:] ]); frame.to_csv(sys.argv[1],index=False,sep="\t")' phaser/{wildcards.sample}/{wildcards.sample}.$ext phaser/{wildcards.sample}/byChrom/*$ext
           done;
           mkdir -p  phaser/{wildcards.sample}/{wildcards.sample}.TMPDIR && rm -f phaser/{wildcards.sample}/{wildcards.sample}.TMPDIR/*
           vt cat phaser/{wildcards.sample}/byChrom/*.vcf.gz | bcftools sort -m 4G -O z -T phaser/{wildcards.sample}/{wildcards.sample}.TMPDIR -o phaser/{wildcards.sample}/{wildcards.sample}.vcf.gz /dev/stdin &> /dev/null
           """

rule phaser_gene_ase:
    input: hap_counts = "phaser/{sample}/{sample}.haplotypic_counts.txt", features = expand("/home/ipedroso/DATA/ref_genomes/B_terrestris/Bombus_terrestris.Bter_1.0.39.{feat_type}.bed", feat_type=["transcript","gene"])
    output: expand("phaser/{sample}/{sample}.phaser_ase.{feat_type}.txt", feat_type=["transcript","gene"], sample="{sample}")
    shell: "~/anaconda2/envs/ngs/bin/python ~/app/phaser/phaser_gene_ae/phaser_gene_ae.py --haplotypic_counts {input.hap_counts} --features {input.features[0]} --o {output[0]} &> {output[0]}.log &&"
           "~/anaconda2/envs/ngs/bin/python ~/app/phaser/phaser_gene_ae/phaser_gene_ae.py --haplotypic_counts {input.hap_counts} --features {input.features[1]} --o {output[1]} &> {output[1]}.log"
